-------------- CONCEPTOS
-- EL BLOQUE ANONIMO (BA) NO SE ALMACENA EN LA BASE DE DATOS. 
-- DEVUELVE MAS DE UN VALOR
-- PUEDES MANEJAR INNER JOIN DENTRO DEL BA
-- O MANEJAR LOS DATOS DEL BA CON UNA VISTA

-- LA FUNCIÃ“N SE MANDA A LLAMAR. SOLO DEVUELVE UN VALOR

-- EL PROCEDIMIENTO (SP) SE GUARDA EN LA BD
-- SE MANDA A EJECUTAR CON EXECUTE "NOMBRE_SP"
-- TE DEVUELVE MAS DE UN VALOR,PERO NO MUCHAS FILAS, POR ESO EMPLEARIAS UN CURSOR

-- EL CURSOR TE DEVUELVE MAS DE UNA FILA


DELETE MONITOREO_EMPLEADO;
DELETE CHECADOR_EMPLEADO;
DELETE MOVIMIENTOS_PRODUCTOS;

DROP FUNCTION CALCULO_TICKET;
DROP PROCEDURE SP_ALTA_EMPLEADO;
DROP PROCEDURE SP_ALTA_CLIENTE;
DROP TABLE MONITOREO_EMPLEADO;
DROP TABLE CHECADOR_EMPLEADO; 

DROP TRIGGER INGRESO_EMPLEADO;
DROP TABLE MOVIMIENTO;
DROP TRIGGER MOVIMIENTO_DATO;
DROP PROCEDURE SP_REPORTE;
DROP TABLE MOVIMIENTOS_PRODUCTOS;

DROP TRIGGER UPD_INS_PRODUCTO;
DROP VIEW PROMO_TARJETA;
DROP VIEW PROMO_DIA; 
DROP VIEW ACT_DIR_XPELICULA;
DROP VIEW TOP_PELICULAS_SEMANA;

---------------INCISOS
-- (LISTO)
-- G - CALCULO DE LOS TOTALES DE TICKET (FUNCION)
-- SET SERVEROUTPUT ON;
-- DROP FUNCTION CALCULO_TICKET;
CREATE OR REPLACE FUNCTION CALCULO_TICKET
RETURN NUMBER
AS 
V_CALCULO_TICKET NUMBER;
BEGIN
SELECT SUM(MONTO)
INTO V_CALCULO_TICKET FROM TICKET
WHERE MONTO >= 0;
RETURN V_CALCULO_TICKET;
END;

DECLARE
BEGIN
DBMS_OUTPUT.PUT_LINE('TOTAL DE LOS TICKETS: '|| CALCULO_TICKET); 
END;


-- (LISTO)
-- H - BAJA DE EMPLEADOS PERMANENTE Y TEMPORAL (BA)
SET SERVEROUTPUT ON
DECLARE 
V_OPC INT:= '&OPCION'; 
V_ID_EMPLEADO INT:= '&ID_EMPLEADO';
V_NOMBREUNO VARCHAR(20);
BEGIN
    SELECT ID_EMPLEADO, E.NOMBRE.NOMBREUNO
    INTO V_ID_EMPLEADO, V_NOMBREUNO
    FROM EMPLEADO E
    WHERE ID_EMPLEADO = V_ID_EMPLEADO;
IF V_OPC = 1 THEN
UPDATE EMPLEADO SET PUESTO = 'BAJA TEMPORAL',SUELDO = 0,HORAS_LABORALES ='X' WHERE ID_EMPLEADO = V_ID_EMPLEADO;
DBMS_OUTPUT.PUT_LINE('EL EMPLEADO '||V_NOMBREUNO||' HA SIDO DADO DE BAJA TEMPORAL ');
ELSIF V_OPC = 2 THEN
UPDATE EMPLEADO SET PUESTO = 'BAJA PERMANENTE',SUELDO = 0,HORAS_LABORALES ='X' WHERE ID_EMPLEADO = V_ID_EMPLEADO;
DBMS_OUTPUT.PUT_LINE('EL EMPLEADO '||V_NOMBREUNO||' HA SIDO DADO DE BAJA PERMANENTE');
ELSE
DBMS_OUTPUT.PUT_LINE('LA OPCION INGRESADA ES INCORRECTA. INTENTA DE NUEVO, 1: PARA BAJAS TEMPORALES O 2: PARA BAJAS PERMANENTES' );
END IF;
END;

SELECT * FROM EMPLEADO;


--(LISTO)
-- A - DAR DE ALTA EMPLEADOS (SP)
-- DROP PROCEDURE SP_ALTA_EMPLEADO;
CREATE OR REPLACE PROCEDURE SP_ALTA_EMPLEADO(P_PRIMER_N VARCHAR,P_SEGUNDO_N VARCHAR,P_PRIMER_A VARCHAR,P_SEGUNDO_A VARCHAR, P_PUESTO VARCHAR,P_SUELDO NUMBER,P_EDAD NUMBER,P_HORAS_LABORALES VARCHAR,P_ANTIGUEDAD_MESES NUMBER,P_ID_GERENTE INT)
IS
BEGIN
	INSERT INTO EMPLEADO VALUES(SQ_ID_EMPLEADO.NEXTVAL,NOMBRE_EMPLEADO(P_PRIMER_N,P_SEGUNDO_N,P_PRIMER_A,P_SEGUNDO_A),P_PUESTO,P_SUELDO,P_EDAD,P_HORAS_LABORALES,P_ANTIGUEDAD_MESES,P_ID_GERENTE);
END SP_ALTA_EMPLEADO;

EXECUTE SP_ALTA_EMPLEADO('STEVE','ARMANDO','BELLO','HDZ', 'GENERAL','4000',23,'6H',6,1);
-- SELECT * FROM EMPLEADO;



--(LISTO)
-- B - DAR DE ALTA CLIENTES (SP)
INSERT INTO RESERVACION VALUES (SQ_ID_RESERVACION.NEXTVAL, 'DOBLE 3D', NULL, '15-09-2021', 120, 'TU RESERVACION EN CINEPOLIS HA SIDO EXITOSA. ESPERAMOS QUE DISFRUTES LA FUNCION');
--SELECT * FROM RESERVACION;

-- DROP PROCEDURE SP_ALTA_CLIENTE;
CREATE OR REPLACE PROCEDURE SP_ALTA_CLIENTE(P_NOMBRE1 VARCHAR, P_NOMBRE2 VARCHAR, P_APELLIDO1 VARCHAR, P_APELLIDO2 VARCHAR, P_SEXO VARCHAR, P_EDAD NUMBER, P_CORREO VARCHAR, P_TELEFONO NUMBER, P_MEMBRESIA VARCHAR, P_ID_RESERVACION INT)
IS
BEGIN
	INSERT INTO CLIENTE VALUES(SQ_ID_CLIENTE.NEXTVAL,NOMBRE_CLIENTE(P_NOMBRE1, P_NOMBRE2, P_APELLIDO1, P_APELLIDO2),P_SEXO, P_EDAD, P_CORREO, P_TELEFONO, P_MEMBRESIA, P_ID_RESERVACION);
END SP_ALTA_CLIENTE;

EXECUTE SP_ALTA_CLIENTE('STEVE','ARMANDO','BELLO','HDZ', 'MASCULINO',23,'MICORREO@GMAIL.COM',5530441203,'FAN',350);

--SELECT * FROM CLIENTE;


--(LISTO)
-- F - MANEJO DE HORARIOS PARA TRABAJADORES (TRIGGER)
-- DROP TABLE MONITOREO_EMPLEADO; 
CREATE TABLE MONITOREO_EMPLEADO (
NOMBRE VARCHAR(20),
ID_AREA NUMBER(10), 
ID_EMPLEADO NUMBER(10) 
);
SELECT * FROM MONITOREO_EMPLEADO;

INSERT INTO MONITOREO_EMPLEADO VALUES ('ENTRADA',1, 1);
INSERT INTO MONITOREO_EMPLEADO VALUES ('SALIDA',2, 2); 
INSERT INTO MONITOREO_EMPLEADO VALUES ('ENTRADA',3, 3); 


-- DROP TABLE CHECADOR_EMPLEADO; 
CREATE TABLE CHECADOR_EMPLEADO (
TIPO VARCHAR(20),
FECHA TIMESTAMP,
USUARIO VARCHAR(20)
);
SELECT * FROM CHECADOR_EMPLEADO;


-- DROP TRIGGER INGRESO_EMPLEADO;
CREATE OR REPLACE TRIGGER INGRESO_EMPLEADO
AFTER INSERT
ON MONITOREO_EMPLEADO
FOR EACH ROW
DECLARE
BEGIN
    INSERT INTO CHECADOR_EMPLEADO VALUES (:NEW.NOMBRE,SYSDATE,USER);
END;



-- (LISTO)
-- D - REPORTE DE ASISTENCIA POR AREA (SP)
-- SET SERVEROUTPUT ON;
-- DROP PROCEDURE SP_REPORTE;
CREATE OR REPLACE PROCEDURE SP_REPORTE(P_ID_AREA NUMBER)
AS
V_ID_EMPLEADO MONITOREO_EMPLEADO.ID_EMPLEADO%TYPE;
V_ID_AREA MONITOREO_EMPLEADO.ID_AREA%TYPE;
BEGIN
SELECT COUNT(ID_EMPLEADO),ID_AREA
INTO V_ID_EMPLEADO,V_ID_AREA
FROM MONITOREO_EMPLEADO
WHERE ID_AREA = P_ID_AREA
GROUP BY ID_AREA;
    DBMS_OUTPUT.PUT_LINE('REPORTE POR ID AREA');
    DBMS_OUTPUT.PUT_LINE('ID_AREA: ' || V_ID_AREA);
    DBMS_OUTPUT.PUT_LINE('TOTAL DE EMPLEADOS: ' || V_ID_EMPLEADO);
END SP_REPORTE;

EXECUTE SP_REPORTE(1);

-- CATALOGO AREAS
-- ID | AREA
-- 1  | TAQUILLA
-- 2  | LIMPIEZA
-- 3  | CONTROL_ACCESOS
-- 4  | DULCERIA
-- 5  | CABINAS
-- 6  | PISO


--(LISTO)
-- C - BITACORA DE MOVIMIENTOS (ALTAS, BAJAS Y MODIFICACIONES) DE PRODUCTOS (TRIGGER)
--DROP TABLE MOVIMIENTO;
CREATE TABLE MOVIMIENTO(
MOVIMIENTO VARCHAR(20),   
FECHA TIMESTAMP,
USUARIO VARCHAR(20),
DESCRIPCION_NUEVO VARCHAR(50),
DESCRIPCION_VIEJO VARCHAR(50),
COSTO_NUEVO  NUMBER(10),
COSTO_VIEJO NUMBER(10),
CANTIDAD_NUEVO NUMBER(10),
CANTIDAD_VIEJO NUMBER(10)
);
INSERT INTO PRODUCTO VALUES (SQ_ID_PRODUCTO.NEXTVAL, 'DULCES CHICOS', 60, 1);

SELECT * FROM MOVIMIENTO;
SELECT * FROM PRODUCTO;

--DROP TRIGGER MOVIMIENTO_DATO;
CREATE OR REPLACE TRIGGER MOVIMIENTO_DATO
AFTER INSERT OR UPDATE OR DELETE ON PRODUCTO
FOR EACH ROW
DECLARE
BEGIN
IF INSERTING THEN
    INSERT INTO MOVIMIENTO VALUES('INSERT',SYSDATE,USER,:NEW.DESCRIPCION,NULL,:NEW.COSTO,NULL,:NEW.CANTIDAD,NULL);
ELSIF UPDATING THEN
    INSERT INTO MOVIMIENTO VALUES('UPDATE',SYSDATE,USER,:NEW.DESCRIPCION,:OLD.DESCRIPCION,:NEW.COSTO,:OLD.COSTO,:NEW.CANTIDAD,:OLD.CANTIDAD);
ELSIF DELETING THEN
    INSERT INTO MOVIMIENTO VALUES('DELETE',SYSDATE,USER,NULL,:OLD.DESCRIPCION,NULL,:OLD.COSTO,NULL,:OLD.CANTIDAD);
END IF;
END;
COMMIT;

-- (LISTO)
-- A - PROMOCIONES POR TARJETA (CURSOR)
-- DROP VIEW PROMO_TARJETA;
CREATE VIEW PROMO_TARJETA AS
SELECT P.ID_PROMOCION, P.DESCRIPCION,T.FORMA_PAGO 
FROM PROMOCION P
INNER JOIN SERVICIO S ON P.ID_PROMOCION = S.ID_PROMOCION
INNER JOIN CINE C ON S.ID_SERVICIO = C.ID_SERVICIO
INNER JOIN FUNCION F ON C.ID_CINE = F.ID_CINE
INNER JOIN TICKET T ON F.ID_TICKET = T.ID_TICKET
WHERE T.FORMA_PAGO = 'TARJETA DEBITO' OR T.FORMA_PAGO = 'TARJETA CREDITO';

-- A - CURSOR
DECLARE 
    V_ID_PROMOCION PROMOCION.ID_PROMOCION%TYPE := '&ID_PROMOCION';
    
    CURSOR C_PROMOXTARJETA  
    IS
    SELECT ID_PROMOCION,DESCRIPCION,FORMA_PAGO
    FROM PROMO_TARJETA
    WHERE ID_PROMOCION = V_ID_PROMOCION;
    V_DESCRIPCION PROMOCION.DESCRIPCION%TYPE;
    V_FORMA_PAGO TICKET.FORMA_PAGO%TYPE;
BEGIN
    OPEN C_PROMOXTARJETA;
        LOOP
            FETCH C_PROMOXTARJETA INTO V_ID_PROMOCION, V_DESCRIPCION,V_FORMA_PAGO;
            EXIT WHEN C_PROMOXTARJETA%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('APLICA PROMOCION: '||V_DESCRIPCION||' POR FORMA DE PAGO: '||V_FORMA_PAGO);
        END LOOP;
    CLOSE C_PROMOXTARJETA;
END;


--(LISTO)
-- F -  QUE DEPENDIENDO EL DIA SE MANEJE UNA PROMOCION DIFERENTE EXCEPTO FINES DE SEMANA (CURSOR)
-- DROP VIEW PROMO_DIA; 
CREATE VIEW PROMO_DIA AS
SELECT P.ID_PROMOCION,P.DESCRIPCION,F.DIA 
FROM PROMOCION P 
INNER JOIN SERVICIO S ON P.ID_PROMOCION = S.ID_PROMOCION
INNER JOIN CINE C ON S.ID_SERVICIO = C.ID_SERVICIO
INNER JOIN FUNCION F ON C.ID_CINE = F.ID_CINE
WHERE (F.DIA = 'LUNES' OR F.DIA = 'MARTES' OR F.DIA = 'MIERCOLES' OR F.DIA = 'JUEVES' OR F.DIA = 'VIERNES')
AND (P.ID_PROMOCION = 3 OR P.ID_PROMOCION = 4 OR P.ID_PROMOCION = 5 OR P.ID_PROMOCION = 6 OR P.ID_PROMOCION = 7);

-----F - CURSOR 
DECLARE 
    V_ID_PROMOCION PROMOCION.ID_PROMOCION%TYPE := '&ID_PROMOCION';
    
    CURSOR C_PROMOXDIA 
    IS
    SELECT ID_PROMOCION,DESCRIPCION,DIA
    FROM PROMO_DIA
    WHERE ID_PROMOCION = V_ID_PROMOCION;
    V_DESCRIPCION PROMOCION.DESCRIPCION%TYPE;
    V_DIA FUNCION.DIA%TYPE;
BEGIN
    OPEN C_PROMOXDIA;
        LOOP
            FETCH C_PROMOXDIA INTO V_ID_PROMOCION, V_DESCRIPCION,V_DIA;
            EXIT WHEN C_PROMOXDIA%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('APLICA PROMOCION: '||V_DESCRIPCION);
        END LOOP;
    CLOSE C_PROMOXDIA;
END;


--(LISTO)
-- J - PODER CONSULTAR UN ACTOR Y/O DIRECTOR Y VER LAS PELICULAS EN LAS QUE HA PARTICIPADO (CURSOR)
-- DROP VIEW ACT_DIR_XPELICULA;
CREATE VIEW ACT_DIR_XPELICULA AS
SELECT R.ID_ROL,R.ROL,R.NOMBRE_ARTISTICO,P.ID_PELICULA
FROM ROL R INNER JOIN PELICULA P
ON R.ID_ROL = P.ID_PELICULA;

-- J - CURSOR
-- SET SERVEROUTPUT ON;
DECLARE 
    V_ID_ROL ROL.ID_ROL%TYPE := '&ID_ROL';
    
    CURSOR C_CONSULTA_ACTOR_DIRECTOR_XPELICULA  
    IS
    SELECT ID_ROL,ROL,NOMBRE_ARTISTICO,ID_PELICULA
    FROM ACT_DIR_XPELICULA
    WHERE ID_ROL = V_ID_ROL;
    V_ROL ROL.ROL%TYPE;
    V_NOMBRE_ARTISTICO ROL.NOMBRE_ARTISTICO%TYPE;
    V_ID_PELICULA PELICULA.ID_PELICULA%TYPE;
BEGIN
    OPEN C_CONSULTA_ACTOR_DIRECTOR_XPELICULA ;
        LOOP
            FETCH C_CONSULTA_ACTOR_DIRECTOR_XPELICULA INTO V_ID_ROL, V_ROL,V_NOMBRE_ARTISTICO,V_ID_PELICULA;
            EXIT WHEN C_CONSULTA_ACTOR_DIRECTOR_XPELICULA%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('EL ID DE ROL INGRESADO PERTENCE A UN: '||V_ROL||' Y ESTA EN LA PELICULA CON ID: '||V_ID_PELICULA );
        END LOOP;
    CLOSE C_CONSULTA_ACTOR_DIRECTOR_XPELICULA;
END;
--SELECT P.FICHA.TITULO_ORIGINAL FROM PELICULA P;


-- (LISTO)
-- J - TOP TRES DE LAS PELICULAS MAS VISTAS POR SEMANA (BA)
SET SERVEROUTPUT ON
DECLARE 
V_PELICULA VARCHAR(30):= '&ID_PELICULA'; 
V_TITULO VARCHAR(30);
V_OPINION VARCHAR(30);
BEGIN
    SELECT P.FICHA.TITULO_DISTRIBUCION, O.CALIFICACION
    INTO V_TITULO, V_OPINION
    FROM PELICULA P INNER JOIN OPINION_ESPECTADOR O
    ON P.ID_PELICULA = O.ID_OPINION
    WHERE P.ID_PELICULA = V_PELICULA;
IF V_OPINION = 'OBRA MAESTRA' THEN
DBMS_OUTPUT.PUT_LINE('LA PELICULA MAS VISTA EN LA SEMANA ES '|| V_TITULO);
ELSE
DBMS_OUTPUT.PUT_LINE('LA PELICULA SELECCIONADA NO ES UNA DE LAS PELICULAS MAS VISTAS EN LA SEMANA');
END IF;
END;


--(LISTO)
-- H - EMPLEADO DEL MES
--CURSOR
BEGIN
    FOR EMP_MES IN (SELECT * FROM EMPLEADO WHERE ID_EMPLEADO > 20 AND EDAD > 18 AND EDAD < 70 AND PUESTO = 'GENERAL' AND ANTIGUEDAD_MESES >= 24)
    LOOP
        DBMS_OUTPUT.PUT_LINE('ID EMPLEADO: ' || EMP_MES.ID_EMPLEADO);
    END LOOP;
        DBMS_OUTPUT.PUT_LINE('UNO DE LOS ANTERIORES EMPLEADOS PUEDEN SER EL EMPLEADO DE ESTE MES AL CUMPLIR LOS REQUISITOS DE LA EMPRESA');
END;

